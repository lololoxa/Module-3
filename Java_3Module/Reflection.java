package Java_3Module;

public class Reflection {
/*=============================== Reflection ================================
    Рефлексия в ООП — это мощный механизм, позволяющий программе исследовать или изменять внутреннюю структуру
и поведение объектов во время выполнения.

    Это означает, что программа может анализировать свои собственные свойства и методы,
а также свойства и методы других объектов, даже если они были неизвестны в момент компиляции.

    Рефлексия позволяет выполнять следующие действия во время выполнения программы:

1. Определение типа объекта: Получение информации о типе объекта, включая его имя, свойства, методы и конструкторы.

2. Создание экземпляров объектов: Динамическое создание объектов на основе их типа.

3. Получение и установка свойств объекта: Доступ к полям объекта для чтения или изменения их значений.

4. Вызов методов объекта: Вызов методов объекта динамически, без явного указания их имен в коде.

5. Изучение и изменение атрибутов (аннотаций): Работа с аннотациями, присвоенными классам, методам или полям.

6. Работа с массивами: Создание и манипуляция массивами динамически.

    Рефлексия особенно полезна в следующих случаях:
- Разработка фреймворков и библиотек
- Сериализация и десериализация
- Разработка инструментов разработки
- Интроспекция

    Однако использование рефлексии следует осуществлять осторожно,
поскольку оно может привести к снижению производительности и усложнению архитектуры программы.
    Кроме того, рефлексия может нарушить инкапсуляцию, позволяя доступ к приватным полям и методам, что
потенциально может привести к небезопасному коду.*/
